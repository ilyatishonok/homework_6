{"version":3,"sources":["components/Tab/index.js","components/Tabs/index.js","components/Article/index.js","components/Loader/index.js","components/ArticlesList/index.js","constants/config.js","components/NewsContainer/index.js","data/tabs.js","components/App/index.js","serviceWorker.js","index.js"],"names":["TabContainer","styled","div","_templateObject","props","selected","Tab","onTabClick","_this","onTabChange","children","_this$props","this","react_default","a","createElement","onClick","Component","TabsContainer","Tabs_templateObject","Tabs","currentTab","tabs","map","tab","Tab_Tab","key","id","title","ArticleLink","Article_templateObject","urlToImage","concat","ArticleContent","_templateObject2","ArticleTitle","h1","_templateObject3","ArticleDescription","_templateObject4","Article","description","url","href","Spinner","Loader_templateObject","Loader","Layout","ArticlesList_templateObject","ArticlesList","articles","isFetching","components_Loader","article","components_Article","config","source","apiKey","NewsContainer","state","setState","fetch","then","res","json","data","_this$state","Fragment","components_Tabs","components_ArticlesList","App","NewsContainer_NewsContainer","Boolean","window","location","hostname","match","ReactDOM","render","components_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ab3520e6.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport styled from 'styled-components';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst TabContainer = styled.div`\r\n    cursor: pointer;\r\n    width: 25%;\r\n    background: ${ props => props.selected ? '#491253' : 'black'};\r\n    color: white;\r\n    font-family: fantasy;\r\n    font-size: 20px;\r\n    transition: all ease .1s;\r\n    user-select: none;\r\n    text-align: center;\r\n    padding: 15px;\r\n\r\n    &:hover {\r\n        background: #491253;\r\n        border: 0px;\r\n    }\r\n\r\n    @media(max-width: 750px) {\r\n        width: 50%;\r\n    }\r\n    \r\n    @media(max-width: 520px) {\r\n        width: 100%;\r\n    }\r\n`;\r\n\r\nexport default class Tab extends Component {\r\n    static propTypes = {\r\n        children: PropTypes.string.isRequired,\r\n        onTabChange: PropTypes.func.isRequired,\r\n        selected: PropTypes.bool.isRequired,\r\n    }\r\n\r\n    onTabClick = () => {\r\n        this.props.onTabChange(this.props.children);\r\n    }\r\n\r\n    render() {\r\n        const { children, selected } = this.props;\r\n\r\n        return (\r\n            <TabContainer selected={selected} onClick={this.onTabClick}>\r\n                {children}\r\n            </TabContainer>\r\n        )\r\n    }\r\n}","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport styled from 'styled-components';\r\nimport Tab from '../Tab';\r\n\r\nconst TabsContainer = styled.div`\r\n    position: fixed;\r\n    display: inline-flex;\r\n    flex-wrap: wrap;\r\n    width: 100%;\r\n    box-shadow: 0 0 10px black;\r\n`;\r\n\r\nconst Tabs = props => {\r\n    const { currentTab, tabs, onTabChange } = props;\r\n\r\n    return (\r\n        <TabsContainer>\r\n           {tabs.map(tab => (\r\n                <Tab\r\n                    key={tab.id}\r\n                    onTabChange={onTabChange}\r\n                    selected={currentTab === tab.title}\r\n                >\r\n                    {tab.title}\r\n                </Tab>\r\n            ))} \r\n        </TabsContainer>\r\n    );\r\n}\r\n\r\nTabs.propTypes = {\r\n    tabs: PropTypes.array.isRequired,\r\n    currentTab: PropTypes.string.isRequired,\r\n    onTabChange: PropTypes.func.isRequired,\r\n}\r\n\r\nexport default Tabs;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport styled from 'styled-components';\r\n\r\nconst ArticleLink = styled.a`\r\n    width: 100%;\r\n    color: white;\r\n    cursor: pointer;\r\n    background-position: center;\r\n    background-size: cover;\r\n    background-repeat: no-repeat;\r\n    ${ props => props.urlToImage && `background-image: url(${props.urlToImage});`}\r\n    text-decoration: none;\r\n`;\r\n\r\nconst ArticleContent = styled.div`\r\n    background-color: rgba(0, 0, 0, 0.7);\r\n    min-height: 200px;\r\n    padding: 30px;\r\n    transition: all ease .2s;\r\n\r\n    &:hover {\r\n        background-color: rgba(0,0,0,0.5);\r\n    }\r\n`;\r\n\r\nconst ArticleTitle = styled.h1`\r\n    margin: 0px;\r\n`;\r\n\r\nconst ArticleDescription = styled.div``;\r\n\r\nconst Article = props => {\r\n    const { title, urlToImage, description, url } = props;\r\n\r\n    return (\r\n        <ArticleLink urlToImage={urlToImage} href={url}>\r\n            <ArticleContent>\r\n                <ArticleTitle>{title}</ArticleTitle>\r\n                <ArticleDescription>{description}</ArticleDescription>\r\n            </ArticleContent>\r\n        </ArticleLink>\r\n    );\r\n}\r\n\r\nArticle.propTypes = {\r\n    title: PropTypes.string.isRequired,\r\n    urlToImage: PropTypes.string.isRequired,\r\n    description: PropTypes.string.isRequired,\r\n    url: PropTypes.string.isRequired,\r\n}\r\n\r\nexport default Article;","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst Spinner = styled.div`\r\n    width: 40px;\r\n    height: 40px;\r\n    background-color: black;\r\n\r\n    margin: 100px auto;\r\n    -webkit-animation: sk-rotateplane 1.2s infinite ease-in-out;\r\n    animation: sk-rotateplane 1.2s infinite ease-in-out;\r\n`;\r\n\r\n\r\nconst Loader = () => {\r\n    return <Spinner></Spinner>\r\n}\r\n\r\nexport default Loader;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport styled from 'styled-components';\r\nimport Article from '../Article';\r\nimport Loader from '../Loader';\r\n\r\nconst Layout = styled.div`\r\n    margin-left: 200px;\r\n    margin-right: 200px;\r\n    padding-top: 54px;\r\n    box-shadow: 0 0 20px black;\r\n    min-height: 400px;\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: center;\r\n    text-align: center;\r\n\r\n    @media(max-width: 1020px) {\r\n        margin-left: 100px;\r\n        margin-right: 100px;\r\n    }\r\n    \r\n    @media(max-width: 750px) {\r\n        margin-left: 50px;\r\n        margin-right: 50px;\r\n        padding-top: 108px;\r\n    }\r\n    \r\n    @media(max-width: 520px) {\r\n        margin: 0px;\r\n        padding-top: 216px;\r\n    }\r\n`;\r\n\r\nconst ArticlesList = props => {\r\n    const { articles, isFetching } = props;\r\n\r\n    return (\r\n        <Layout>\r\n            {isFetching ? <Loader /> : articles.map(article => {\r\n                return ( \r\n                    <Article\r\n                        key={article.title}\r\n                        title={article.title} \r\n                        description={article.description}\r\n                        url={article.url}\r\n                        urlToImage={article.urlToImage}\r\n                    />\r\n                )\r\n            })}\r\n        </Layout>   \r\n    )\r\n}\r\n\r\nArticlesList.propTypes = {\r\n    articles: PropTypes.array.isRequired,\r\n    isFetching: PropTypes.bool.isRequired,\r\n}\r\n\r\nexport default ArticlesList;","export default {\r\n    source: 'https://newsapi.org/v2/everything',\r\n    apiKey: 'e3f4198bcce84c8ba6d01cda68933d4f',\r\n}","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Tabs from '../Tabs';\r\nimport ArticlesList from '../ArticlesList';\r\nimport config from '../../constants/config';\r\n\r\nexport default class NewsContainer extends Component {\r\n    static propTypes = {\r\n        tabs: PropTypes.array.isRequired,\r\n    }\r\n\r\n    state = {\r\n        currentTab: null,\r\n        articles: [],\r\n        isFetching: false,\r\n    }\r\n\r\n    onTabChange = tab => {\r\n        const { source, apiKey } = config;\r\n\r\n        this.setState({\r\n            currentTab: tab,\r\n            isFetching: true,\r\n        });\r\n\r\n        fetch(`${source}?page=${1}&apiKey=${apiKey}&q=${tab}`).then(res => res.json()).then(data => {\r\n            this.setState({\r\n                articles: data.articles,\r\n                isFetching: false,\r\n            });\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const { tabs } = this.props;\r\n        const { articles, currentTab, isFetching } = this.state;\r\n\r\n        return (\r\n            <React.Fragment>\r\n                <Tabs currentTab={currentTab} onTabChange={this.onTabChange} tabs={tabs} />\r\n                <ArticlesList articles={articles} isFetching={isFetching} />\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}","const tabs = [\r\n    {\r\n        id: 0,\r\n        title: 'World',\r\n    },\r\n    {\r\n        id: 1,\r\n        title: 'People',\r\n    },\r\n    {\r\n        id: 2,\r\n        title: 'Sport',\r\n    },\r\n    {\r\n        id: 3,\r\n        title: 'Games',\r\n    },\r\n];\r\n\r\nexport default tabs;","import React from 'react';\r\nimport NewsContainer from '../NewsContainer';\r\nimport tabs from '../../data/tabs';\r\n\r\nconst App = () => {\r\n    return <NewsContainer tabs={tabs} />;\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport './styles.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}